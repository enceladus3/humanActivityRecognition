#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 11 14:43:13 2019

@author: Octavian
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import time
# %matplotlib inline 
# Print stuff right after the code


#
#  Load the dataset into dataframe 'X'
#

X = pd.read_csv('dataset-har-PUC-Rio-ugulino.csv', sep = '\;')
X.head()
X = X.sample(frac = 1)
X.head()

# Get the list of columns and data types
X.info()

# Get the unique counts by gender
X.gender.value_counts()

#
# Encode the gender column, 0 as male, 1 as female
#
X.gender = X.gender.map({'Man':1, 'Woman':0})
X.gender.value_counts()

# Encode class to 0, 1, 2, 3, 4 values
X['class'].value_counts()
X['class'] = X['class'].map({'sitting':0, 'standing':1, 'walking':2,'standingup':3, 'sittingdown':4})
X['class'].value_counts()


#
# Clean up any column with commas in it
# so that they're properly represented as decimals instead
#
X['how_tall_in_meters'] = X['how_tall_in_meters'].str.replace(',', '.')
X['body_mass_index'] = X['body_mass_index'].str.replace(',', '.')
X.head()
X['class'].value_counts()
X.info()

# Convert how_tall_in_meters, body_mass_index, z4 to numeric
X['how_tall_in_meters'] = pd.to_numeric(X['how_tall_in_meters'], errors='raise')
X['body_mass_index'] = pd.to_numeric(X['body_mass_index'], errors='raise')
X['z4'] = pd.to_numeric(X['z4'], errors='raise')
X.z4.value_counts().head()
X[ (X['z4'] == np.NaN)]
X['z4'].unique()
X.z4.value_counts().head()
X['z4'].unique()
X.info()

# Make sure there are no rows with NaNs
print (X[pd.isnull(X).any(axis=1)])

# Store the predictor variable in y
y = X[['class']]

# Drop the predictor class from X
# X = X.drop(labels=['class'], axis=1)
# X.info()

# Drop the user from X
X = X.drop(labels=['user'], axis=1)
X.info()



# Split data into test / train sets
# Test size can be 30% with random_state 7
# Variable names: X_train, X_test, y_train, y_test
#
# If the random_state is not specified, 
# then every time I run(execute) my code a new random value is generated 
# and the train and test datasets would have different values each time.
# However, if a fixed value is assigned like random_state = 42 then 
# no matter how many times I execute the code the result would be the same 
# .i.e, same values in train and test datasets.
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, np.ravel(y), test_size=0.30, random_state=7)
